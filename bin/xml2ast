#!perl
use strict;
use warnings FATAL => 'all';
use diagnostics;

use Getopt::Long;
use Log::Any qw/$log/;
use Log::Any::Adapter;
use Log::Log4perl qw/:easy/;
use MarpaX::Languages::XML;
use MarpaX::Languages::XML::Impl::IO;   # Default IO implementation
use POSIX qw/EXIT_FAILURE EXIT_SUCCESS/;
use Try::Tiny;

# ABSTRACT: XML AST

# VERSION

# PODNAME: xml2ast

# AUTHORITY

my $help = 0;
my $loglevel = 'INFO';
my $logstderr = 0;
my $block_size = 0;
my @sax = ();

our %SAX_HANDLERS = (
                     start_document => \&_start_document,
                     start_element  => \&_start_element,
                     end_element    => \&_end_element,
                     end_document   => \&_end_document,
                    );

GetOptions ('help!' => \$help,
            'loglevel=s' => \$loglevel,
            'debug' => sub { $loglevel = 'DEBUG' },
            'info' => sub { $loglevel = 'INFO' },
            'warn' => sub { $loglevel = 'WARN' },
            'error' => sub { $loglevel = 'ERROR' },
            'fatal' => sub { $loglevel = 'FATAL' },
            'trace' => sub { $loglevel = 'TRACE' },
            'block_size=i' => \$block_size,
            'sax=s' => \@sax,
            'logstderr!' => \$logstderr);

__PACKAGE__->_init($loglevel, $logstderr);

@sax = split(/,/,join(',',@sax));
my %sax_handlers = (grep { $_ eq 'all' } @sax)
  ?
  %SAX_HANDLERS
  :
  map { $_ => $SAX_HANDLERS{$_} } grep { exists($SAX_HANDLERS{$_}) } @sax;

foreach (@ARGV) {
    my $source = $_;
    try {
        MarpaX::Languages::XML->parse(io => MarpaX::Languages::XML::Impl::IO->new->open($source),
                                      block_size => $block_size,
                                      sax_handlers => \%sax_handlers
            );
    } catch {
        $log->errorf('%s', "$_");
        return;
    };
}

exit(EXIT_SUCCESS);

##################################################"

sub _init {
  my ($class, $loglevel, $logstderr) = @_;

  my $defaultLog4perlConf = <<DEFAULT_LOG4PERL_CONF;
log4perl.rootLogger              = $loglevel, Screen
log4perl.appender.Screen         = Log::Log4perl::Appender::Screen
log4perl.appender.Screen.stderr  = $logstderr
log4perl.appender.Screen.layout  = PatternLayout
log4perl.appender.Screen.layout.ConversionPattern = %d %-5p %6P %m{chomp}%n
DEFAULT_LOG4PERL_CONF
   Log::Log4perl::init(\$defaultLog4perlConf);
   Log::Any::Adapter->set('Log4perl');
}

sub _start_document {
  my $self = shift;
  $self->_logger->infof('[SAX] start_document');
}

sub _start_element {
  my $self = shift;
  $self->_logger->infof('[SAX] start_element %s', \@_);
}

sub _end_element {
  my $self = shift;
  $self->_logger->infof('[SAX] end_element');
}

sub _end_document {
  my $self = shift;
  $self->_logger->infof('[SAX] end_document');
}
